#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

[ -n "${SCRIPT_DEBUG}" ] && PS4='${0##*/}:$(printf "%03d" $LINENO) $(date +%Y-%m-%dT%H:%M:%S%z)> ' && set -x


# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

# use the latest ruby (1.9) in stackato
export PATH=/opt/rubies/current/bin:$PATH

CACHED_DIRS="rubygems"


function puts-step (){
  echo "-----> $@"
}

USE_LOCAL_CACHE="false"
if [ -d "${BUILD_DIR}/vendor/cache" ]; then
  puts-step "Found vendor/cache"
  USE_LOCAL_CACHE="true"
else
  puts-step "build-dir: ${BUILD_DIR}"
fi

mkdir -p $CACHE_DIR

# Syntax sugar.
indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

function bundle_install_local {
    unset RUBYOPT BUNDLE_BIN_PATH GEM_PATH GEM_HOME BUNDLE_GEMFILE
    puts-step "Installing local gems dependencies (bundle install --local --deployment)"
    bundle install --verbose --local --deployment 2>&1 | indent
}

function bundle_install_with_cache {
    unset RUBYOPT BUNDLE_BIN_PATH GEM_PATH GEM_HOME BUNDLE_GEMFILE
    puts-step "Installing gem dependencies (bundle install --path rubygems)"
    bundle install --verbose --path rubygems 2>&1 | indent
}

function write_database_yml {
    puts-step "Writing database.yml"
    ruby "$ROOT_DIR/opt/write_database_yml.rb" | indent
}

function write_boot_config {
    puts-step "Writing config/boot.rb"
    ruby "$ROOT_DIR/opt/write_boot_config.rb" | indent
}

function db_migrate {
    puts-step "Running rake db:migrate"
    bundle exec rake db:migrate --trace 2>&1 | indent
}

function create_asset_plugin {
    puts-step "Enabling static assets plugin"
    PLUGIN_DIR=$BUILD_DIR/plugins/serve_static_assets
    mkdir -p $PLUGIN_DIR
    echo "Rails.application.config.serve_static_assets = true" > $PLUGIN_DIR/init.rb
}


cd $BUILD_DIR


use_bundle_hack=false
if $use_bundle_hack; then
  echo "using bundler"
  if [ "$USE_LOCAL_CACHE" = "true" ]; then
    bundle_install_local
  else
    # Restore old artifacts from the cache.
    for dir in $CACHED_DIRS; do
      cp -R $CACHE_DIR/$dir . &> /dev/null || true
    done
    bundle_install_with_cache
  fi
else
  echo "skipping bundler"
fi

write_database_yml
write_boot_config
db_migrate
create_asset_plugin


if [ "$USE_LOCAL_CACHE" != "true" ]; then
  # Store new artifacts in cache.
  for dir in $CACHED_DIRS; do
    rm -rf $CACHE_DIR/$dir
    cp -R $dir $CACHE_DIR/
  done
fi
